import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.TilePane;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import java.io.IOException;

/**
 * This class is the main one that starts the program and extends Application in order to use JavaFX.
 * @author Karmen
 */
public class Window extends Application {
	static final int squareSize = 50;
	static final int headerSize = squareSize * 2;

	private Scene scene;

    /**
     * Method that sets the appearance of the start window.
     * @param primaryStage stage, where the start window is based on.
     */
	@Override
	public void start(Stage primaryStage) {
		FileManager fileManager = new FileManager();

		primaryStage.setTitle("Nonogramm");

		BorderPane border = new BorderPane();
        HBox hBox = new HBox();
        Label label = new Label();
		final Scene window = new Scene(border, 500, 450);

		TilePane tile = new TilePane();
		tile.setHgap(10);
		tile.setVgap(10);
		tile.setPrefColumns(2);

        Image image = new Image("nonogram.png");
        ImageView view = new ImageView();
        view.setImage(image);
        view.setPreserveRatio(true);
        view.setFitWidth(200);
        view.setSmooth(true);

        /*
        Each map gets its own button; pressing it will open a new stage with suitable content.
         */
		Button fruits = new Button("Puuviljad"); //The button names are in Estonian, but everything else, even the corresponding level names are in English.
		fruits.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
        fruits.setOnAction(new EventHandler<ActionEvent>() {

            public void handle(ActionEvent event) {
                scene = initMap("Fruits", fileManager);
                if (scene != null) {
                    primaryStage.setScene(scene);
                }
            }
        });

		Button snail = new Button("Tigu");
		snail.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
        snail.setOnAction(new EventHandler<ActionEvent>() {

            public void handle(ActionEvent event) {
                scene = initMap("Snail", fileManager);
                if (scene != null) {
                    primaryStage.setScene(scene);
                }
            }
        });

		Button test = new Button("Test");
		test.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
        test.setOnAction(new EventHandler<ActionEvent>() {

            public void handle(ActionEvent event) {
                scene = initMap("Test", fileManager);
                if (scene != null) {
                    primaryStage.setScene(scene);
                }
            }
        });

        Button test2 = new Button("Test2");
        test2.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
        test2.setOnAction(new EventHandler<ActionEvent>() {

            public void handle(ActionEvent event) {
                scene = initMap("Test2", fileManager);
                if (scene != null) {
                    primaryStage.setScene(scene);
                }
            }
        });

        Button simpleOne = new Button("Lihtne Tase");
        simpleOne.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
        simpleOne.setOnAction(new EventHandler<ActionEvent>() {

            public void handle(ActionEvent event) {
                scene = initMap("Simple One", fileManager);
                if (scene != null) {
                    primaryStage.setScene(scene);
                }
            }
        });

        tile.getChildren().addAll(fruits, snail, test, test2, simpleOne);

        label.setText(" \n" + "Mängite Nonogrammi mängu.\n" +" \n" + "Valige endale sobiv tase.\n"+ " \n");
        label.setFont(Font.font("Verdana", 20));
        label.setAlignment(Pos.CENTER);
        label.setWrapText(true);
        hBox.getChildren().add(label);

		border.setTop(hBox);
        hBox.setAlignment(Pos.TOP_CENTER);
		border.setCenter(tile);
        border.setRight(view);

		primaryStage.setScene(window);
        primaryStage.setResizable(false); //start window is not resizeable
		primaryStage.show();
	}

    /**
     *
     * @param map This refers to the text file of a level that is chosen to be played.
     * @param fileManager
     * @return New gamefield that is generated by the corresponding level text file.
     */
	private Scene initMap(String map, FileManager fileManager) {
		int [][] picture;
		try {
			picture = fileManager.getPicture(map);
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			return null;
		}

		Game game = new Game(picture, this);
		game.init(); //calls forth the init method on the instance of game
		game.addMouseEventHandler();//what happens when using mouse click
		return new Scene(game, 700, 700);
	}

    /**
     * Method for calling forth the alert window when a level has been completed successfully.
     */
	void displayEndScreen() {
    	Alert alert = new Alert(Alert.AlertType.INFORMATION);
		alert.setTitle("Palju õnne!");
		alert.setHeaderText(null);
		alert.setContentText("Olete lahendanud kõik õigesti");
		alert.showAndWait();
		Stage stage = (Stage) scene.getWindow();
		stage.close();//when "OK" is pressed, the game window and program itself will close

	}
}